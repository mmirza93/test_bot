{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d55abaf3-37cf-4427-aa37-b71e9fbffd4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-30 15:46:05.381 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\murad.mirzayev\\AppData\\Local\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-30 15:46:05.388 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import xlwings as xw\n",
    "\n",
    "file_path = \"Qarabag Economic Model_2032_oil.xlsx\"\n",
    "result_sheet = \"Result\"\n",
    "price_sheet = \"Intro\"\n",
    "price_cell = \"B14\"\n",
    "capex_sheet = \"Model Inputs\"\n",
    "capex_items_range = \"B134:B146\"\n",
    "capex_years_range = \"E133:AK133\"\n",
    "\n",
    "def update_oil_price_and_load_data(oil_price):\n",
    "    app = xw.App(visible=False)\n",
    "    wb = app.books.open(file_path)\n",
    "    sht_price = wb.sheets[price_sheet]\n",
    "    sht_result = wb.sheets[result_sheet]\n",
    "    sht_price.range(price_cell).value = oil_price\n",
    "    wb.app.calculate()\n",
    "    indicators = [str(i).strip() for i in sht_result.range(\"B3:B8\").value]\n",
    "    entities = [str(e).strip() for e in sht_result.range(\"C2:G2\").value]\n",
    "    values = sht_result.range(\"C3:G8\").value\n",
    "    wb.save()\n",
    "    wb.close()\n",
    "    app.quit()\n",
    "    data = pd.DataFrame(values, index=indicators, columns=entities)\n",
    "    return data\n",
    "\n",
    "def read_current_oil_price():\n",
    "    app = xw.App(visible=False)\n",
    "    wb = app.books.open(file_path)\n",
    "    sht_price = wb.sheets[price_sheet]\n",
    "    price = sht_price.range(price_cell).value\n",
    "    wb.close()\n",
    "    app.quit()\n",
    "    return price\n",
    "\n",
    "def read_capex_breakdown(mode=\"total\"):\n",
    "    app = xw.App(visible=False)\n",
    "    wb = app.books.open(file_path)\n",
    "    sht = wb.sheets[capex_sheet]\n",
    "    items = [str(i).strip() for i in sht.range(capex_items_range).value]\n",
    "    years = sht.range(capex_years_range).value\n",
    "    values = sht.range(\"E134:AK146\").value\n",
    "    wb.close()\n",
    "    app.quit()\n",
    "    df = pd.DataFrame(values, index=items, columns=years)\n",
    "    if mode == \"total\":\n",
    "        return df.sum(axis=1)\n",
    "    elif mode == \"year\":\n",
    "        return df.sum(axis=0)\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "entity_map = {\n",
    "    \"socar karabakh\": \"SOCAR Karabakh\",\n",
    "    \"soa\": \"SOCAR Karabakh\",\n",
    "    \"rsa project\": \"RSA Project\",\n",
    "    \"project\": \"RSA Project\",\n",
    "    \"total project\": \"RSA Project\",\n",
    "    \"contractor party 2\": \"Contractor Party 2\",\n",
    "    \"foreign contractor\": \"Contractor Party 2\",\n",
    "    \"bp\": \"Contractor Party 2\",\n",
    "    \"other contractor\": \"Contractor Party 2\",\n",
    "    \"state share\": \"State Share\",\n",
    "    \"state/sofaz incl. ag\": \"State/SOFAZ incl. AG\"\n",
    "}\n",
    "\n",
    "indicator_map = {\n",
    "    \"capex\": \"CAPEX, MM USD\",\n",
    "    \"cash flow\": \"Cash Flow, MM USD\",\n",
    "    \"npv\": \"NPV10, MM USD\",\n",
    "    \"npv10\": \"NPV10, MM USD\",\n",
    "    \"irr\": \"IRR, %\",\n",
    "    \"non-discounted payback\": \"Non-Discounted Payback Period\",\n",
    "    \"discounted payback\": \"Discounted Payback Period\"\n",
    "}\n",
    "\n",
    "st.title(\"Qarabag Economic Model Assistant\")\n",
    "\n",
    "user_input = st.text_input(\"Ask your question here:\")\n",
    "\n",
    "if user_input:\n",
    "    lowered = user_input.lower()\n",
    "\n",
    "    if \"hello\" in lowered and \"ocean\" in lowered:\n",
    "        st.write(\"Hello SUMI User, how can I help you with?\")\n",
    "\n",
    "    elif \"what oil price\" in lowered and \"used\" in lowered:\n",
    "        price = read_current_oil_price()\n",
    "        st.write(f\"The current oil price used in the model is {price} USD/bbl.\")\n",
    "\n",
    "    elif \"capex\" in lowered and \"breakdown\" in lowered:\n",
    "        if \"life of field\" in lowered or \"total\" in lowered:\n",
    "            capex_totals = read_capex_breakdown(mode=\"total\")\n",
    "            st.write(\"CAPEX Breakdown - Life of Field (Total):\")\n",
    "            st.dataframe(capex_totals)\n",
    "        elif \"year by year\" in lowered:\n",
    "            capex_years = read_capex_breakdown(mode=\"year\")\n",
    "            st.write(\"CAPEX Breakdown - Year by Year:\")\n",
    "            st.dataframe(capex_years)\n",
    "        else:\n",
    "            st.write(\"Would you like the CAPEX breakdown by 'life of field' (total) or 'year by year'?\")\n",
    "\n",
    "    elif (\"oil price\" in lowered) and any(cmd in lowered for cmd in [\"update\", \"set\", \"change\"]):\n",
    "        words = user_input.split()\n",
    "        new_price = None\n",
    "        for w in words:\n",
    "            try:\n",
    "                val = float(w)\n",
    "                if val > 0:\n",
    "                    new_price = val\n",
    "                    break\n",
    "            except:\n",
    "                continue\n",
    "        if new_price is not None:\n",
    "            try:\n",
    "                data = update_oil_price_and_load_data(new_price)\n",
    "                st.write(f\"Oil price updated to {new_price} USD/bbl and data refreshed.\")\n",
    "            except Exception as e:\n",
    "                st.error(f\"Failed to update oil price: {e}\")\n",
    "        else:\n",
    "            st.write(\"Sorry, I couldn't find a valid oil price in your request.\")\n",
    "\n",
    "    else:\n",
    "        found_entity = next((entity_map[e] for e in entity_map if e in lowered), None)\n",
    "        found_indicator = next((indicator_map[i] for i in indicator_map if i in lowered), None)\n",
    "        if not found_entity and \"capex\" not in lowered:\n",
    "            st.write(\"Sorry, I couldn't find which party you're asking about.\")\n",
    "        elif not found_indicator and \"capex\" not in lowered:\n",
    "            st.write(\"Sorry, I couldn't understand which metric you're referring to.\")\n",
    "        else:\n",
    "            try:\n",
    "                data = update_oil_price_and_load_data(read_current_oil_price())\n",
    "                value = data.loc[found_indicator, found_entity]\n",
    "                st.write(f\"{found_entity}'s {found_indicator} is {value}\")\n",
    "            except:\n",
    "                st.write(\"Data not found for the given query.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f7963da-30f1-4c9b-8c17-dc830f74a3e7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
